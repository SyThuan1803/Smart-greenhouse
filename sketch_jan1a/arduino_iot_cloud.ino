// ArduinoIoTCloud - Version: 1.9.0
#include <ArduinoIoTCloud.h>

#include "thingProperties.h"
// DHT sensor library - Version: Latest 
#include <DHT.h>
#include <DHT_U.h>


/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1353d1dd-3925-4bae-8c68-d1adab969306

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humi;
  float temp;
  CloudLight greenled;
  CloudLight redled;
  CloudLight yellowled;
  int phot;
  int soil;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


#include <chrono>
#include <ctime>
#include <string>

// Define cac pin
#define dht11Pin 4            // Humi & Temp
#define cdsLSPin 2            // Phot 
#define sMSPin 12             // Soil

#define redLedPin 13          // Representing for the activate of fan (reduce temperature for tree)
#define yellowLedPin 14       // Representing for the activate of bulb (ensure the light for tree)   
#define greenLedPin 15        // Representing for the activate of water pump (provide water for tree)

#define DHTTYPE DHT11
DHT dht(dht11Pin, DHTTYPE);

int photValue;
int soilValue;


int temperatureThreshold = 30;      // if the temperatureValue is greater than the threshold, the fan should be turned on
int photoresistorThreshold = 3000;  // if the photoresistorValue is greater than the threshold, the bulb should be turned on
int soilMoistureThreshold = 1000;   // if the soilMoisutreValue is less than the threshold, the water bump should be turned on

// Global variable
unsigned long previousMillis = 0;
const long interval = 5000;


// Time control cho tung thiet bi (led), dung de xac dinh xem dang 
// la trang thai auto hay manual
std::time_t t_cRed = 0;
std::time_t t_cYellow = 0;
std::time_t t_cGreen = 0;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  dht.begin();
  
  // Defined in thingProperties.h
  initProperties();

  pinMode(redLedPin, OUTPUT);
  pinMode(yellowLedPin, OUTPUT);
  pinMode(greenLedPin, OUTPUT);
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
}



void loop() {
  // Doc thong tin tu cam bien
  int photValue = analogRead(cdsLSPin);
  int soilValue = analogRead(sMSPin);
  phot = photValue;
  soil = soilValue;
  humi = dht.readHumidity();
  temp = dht.readTemperature();
  
  redled = digitalRead(redLedPin);
  yellowled = digitalRead(yellowLedPin);
  greenled = digitalRead(greenLedPin);

  auto cur = std::chrono::system_clock::now();
  std::time_t cur_t = std::chrono::system_clock::to_time_t(cur);
  
  // Xuat thong tin ra Serial
  Serial.print("At: ");
  Serial.print(std::ctime(&cur_t));
  Serial.print(">> ");

  
  /*Serial.print("Humidity (%): ");
  Serial.print(humi);

  Serial.print("\tTemperature (C): ");
  Serial.print(temp);
  
  Serial.print("\tPhotoresistor: ");
  Serial.print(photValue);

  Serial.print("\tSoil moisture: ");
  Serial.println(soilValue);*/

  
  Serial.print("Fan (red led): ");
  if (redled == 1) Serial.print("ON\t");
  else Serial.print("OFF\t");

  Serial.print("Bulb (yellow led): ");
  if (yellowled == 1) Serial.print("ON\t");
  else Serial.print("OFF\t");

  Serial.print("Water pump (green led): ");
  if (greenled == 1) Serial.println("ON\t");
  else Serial.println("OFF\t");

  /*Serial.print("Auto mode: ");
  if (t_cRed != 0) Serial.print("OFF\t");
  else Serial.print("ON\t");
  if (t_cGreen != 0) Serial.print("OFF\t");
  else Serial.print("ON\t");
  if (t_cYellow != 0) Serial.println("OFF");
  else Serial.println("ON");*/

  Serial.println("---");
  
  
  // Dieu khien red led
  if (t_cRed != 0) {
    double diff;
    diff = std::difftime(t_cRed, cur_t);

    // Neu t_cRed da het han
    if (diff <= 0) {
      t_cRed = 0;
    }

    // Neu khong co gi thay doi, giu nguyen dieu khien nhu cu
  }
  else {
    if (temp > temperatureThreshold) digitalWrite(redLedPin, HIGH);
    else digitalWrite(redLedPin, LOW);
  }

  // Dieu khien yellow led
  if (t_cYellow != 0) {
    double diff;
    diff = std::difftime(t_cYellow, cur_t);

    // Neu t_cYellow da het han
    if (diff <= 0) {
      t_cYellow = 0;
    }

    // Neu khong co gi thay doi, giu nguyen dieu khien nhu cu
  }
  else {
    if (phot > photoresistorThreshold) digitalWrite(yellowLedPin, HIGH);
    else digitalWrite(yellowLedPin, LOW);
  }

  // Dieu khien green led
  if (t_cGreen != 0) {
    double diff;
    diff = std::difftime(t_cGreen, cur_t);

    // Neu t_cGreen da het han
    if (diff <= 0) {
      t_cGreen = 0;
    }

    // Neu khong co gi thay doi, giu nguyen dieu khien nhu cu
  }
  else {
    if (soil > soilMoistureThreshold) digitalWrite(greenLedPin, HIGH);
    else digitalWrite(greenLedPin, LOW);
  }


  ArduinoCloud.update();
  //ArduinoIoTPreferredConnection.disconnect();
  //ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  delay(1000);
}

/*
  Since Greenled is READ_WRITE variable, onGreenledChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGreenledChange()  {
  // Set thoi gian hieu luc la 30 phut
  auto cur = std::chrono::system_clock::now();
  std::time_t cur_t = std::chrono::system_clock::to_time_t(cur);
  t_cGreen = cur_t;
  struct tm* tm = localtime(&t_cGreen);
  //tm->tm_min += 30;
  tm->tm_sec += 10;
  t_cGreen = mktime(tm);

  if (greenled == 1) digitalWrite(greenLedPin, HIGH);
  else digitalWrite(greenLedPin, LOW);
}
/*
  Since Redled is READ_WRITE variable, onRedledChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedledChange()  {
  // Set thoi gian hieu luc la 30 phut
  auto cur = std::chrono::system_clock::now();  
  std::time_t cur_t = std::chrono::system_clock::to_time_t(cur);
  t_cRed = cur_t;
  struct tm* tm = localtime(&t_cRed);
  //tm->tm_min += 30;
  tm->tm_sec += 10;
  t_cRed = mktime(tm);

  if (redled == 1) digitalWrite(redLedPin, HIGH);
  else digitalWrite(redLedPin, LOW);
}
/*
  Since Yellowled is READ_WRITE variable, onYellowledChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onYellowledChange()  {
  // Set thoi gian hieu luc la 30 phut
  auto cur = std::chrono::system_clock::now();
  std::time_t cur_t = std::chrono::system_clock::to_time_t(cur);
  t_cYellow = cur_t;
  struct tm* tm = localtime(&t_cYellow);
  //tm->tm_min += 30;
  tm->tm_sec += 10;
  t_cYellow = mktime(tm);

  if (yellowled == 1) digitalWrite(yellowLedPin, HIGH);
  else digitalWrite(yellowLedPin, LOW);
}
